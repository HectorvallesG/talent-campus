// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @unique @default(uuid())
  email       String   @unique
  rol         String
  password    String
  isActivated String   @default("false")
  student     Student?
  admin       Admin?
  teacher     Teacher?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Admin {
  id        String   @id @unique @default(uuid())
  name      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Teacher {
  id        String   @id @unique @default(uuid())
  name      String
  lastName  String
  userName  String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id        String          @id @unique @default(uuid())
  name      String
  lastName  String
  userName  String          @unique
  faculty   String
  specialty String
  profile   ProfileStudent?
  projects  Projects[]
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String          @unique
  teacherId String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Projects {
  id          String   @id @unique @default(uuid())
  title       String
  description String
  url         String
  tags        String
  student     Student  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId   String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProfileStudent {
  id        String   @id @unique @default(uuid())
  bio       String
  city      String
  career    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId String   @unique
}
